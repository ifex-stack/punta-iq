import { useState } from "react";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import { format } from "date-fns";
import { 
  BookmarkIcon, BookmarkPlus, Share2, TrendingUp, ChevronDown, ChevronUp, 
  Award, Heart, Clock, AlertTriangle, Eye, Shield, Target, Zap, BarChart3, 
  Percent, Flame, Goal, LineChart
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { useToast } from "@/hooks/use-toast";

export interface PredictionCardProps {
  prediction: {
    id: string;
    matchId: string;
    sport: string;
    createdAt: string;
    homeTeam: string;
    awayTeam: string;
    startTime: string;
    league: string;
    predictedOutcome: string;
    confidence: number;
    isPremium: boolean;
    valueBet?: {
      outcome: string;
      odds: number;
      value: number;
      isRecommended: boolean;
    } | null;
    predictions: {
      "1X2"?: {
        outcome: string;
        homeWin: { probability: number; odds: number };
        draw: { probability: number; odds: number };
        awayWin: { probability: number; odds: number };
      };
      "BTTS"?: {
        outcome: string;
        probability: number;
        odds?: number;
      };
      "BTTS_Over"?: {
        line: number;
        outcome: string;
        probability: number;
        odds?: number;
      };
      "Over_Under"?: {
        line: number;
        outcome: string;
        probability: number;
        odds?: number;
      };
      "CorrectScore"?: {
        outcome: string;
        probability: number;
        odds?: number;
        scores?: {
          home: number;
          away: number;
        }[];
      };
      "Winner"?: {
        outcome: string;
        homeWin: { probability: number; odds: number };
        awayWin: { probability: number; odds: number };
      };
      "TotalPoints"?: {
        line: number;
        outcome: string;
        probability: number;
        predictedTotal: number;
        odds?: number;
      };
      "HalfTime_FullTime"?: {
        outcome: string;
        probability: number;
        odds?: number;
        combinations?: {
          halfTime: string;
          fullTime: string;
          probability: number;
          odds?: number;
        }[];
      };
      "Double_Chance"?: {
        outcome: string;
        probability: number;
        odds?: number;
        combinations: {
          name: string;
          probability: number;
          odds?: number;
        }[];
      };
      "Win_To_Nil"?: {
        outcome: string;
        team: string;
        probability: number;
        odds?: number;
      };
      "Spread"?: {
        line: number;
        favored: string;
        probability: number;
        odds?: number;
      };
      "PredictedScore"?: {
        home: number;
        away: number;
        probability?: number;
      };
    };
  };
  onSave?: (predictionId: string) => void;
  onAddToAccumulator?: (predictionId: string) => void;
  isSaved?: boolean;
  isInAccumulator?: boolean;
  subscriptionStatus?: "free" | "premium" | "none";
}

export default function PredictionCard({ 
  prediction, 
  onSave, 
  onAddToAccumulator,
  isSaved = false,
  isInAccumulator = false,
  subscriptionStatus = "free" 
}: PredictionCardProps) {
  const [expanded, setExpanded] = useState(false);
  const [saved, setSaved] = useState(isSaved);
  const [inAccumulator, setInAccumulator] = useState(isInAccumulator);
  const { toast } = useToast();
  
  const matchDate = new Date(prediction.startTime);
  const isFootball = prediction.sport === "football";
  const isBasketball = prediction.sport === "basketball";
  
  const predictions1X2 = prediction.predictions["1X2"];
  const predictionsWinner = prediction.predictions["Winner"];
  const mainPrediction = predictions1X2 || predictionsWinner;
  
  const primaryMarket = isFootball ? "1X2" : "Winner";
  const outcomeDisplay = 
    prediction.predictedOutcome === "H" ? "Home" :
    prediction.predictedOutcome === "D" ? "Draw" :
    prediction.predictedOutcome === "A" ? "Away" : prediction.predictedOutcome;
  
  const formatOdds = (odds: number) => odds.toFixed(2);
  
  const getOutcomeTeam = () => {
    if (prediction.predictedOutcome === "H") return prediction.homeTeam;
    if (prediction.predictedOutcome === "A") return prediction.awayTeam;
    return "Draw";
  };
  
  const getGradientByConfidence = (confidence: number) => {
    if (confidence > 80) return "from-green-500 to-emerald-700";
    if (confidence > 65) return "from-blue-500 to-cyan-700";
    if (confidence > 50) return "from-amber-500 to-orange-700";
    return "from-red-500 to-rose-700";
  };
  
  const handleSave = () => {
    setSaved(!saved);
    if (onSave) {
      onSave(prediction.id);
    }
    
    toast({
      title: !saved ? "Prediction Saved" : "Prediction Removed",
      description: !saved 
        ? "This prediction has been saved to your bookmarks" 
        : "This prediction has been removed from your bookmarks",
    });
  };
  
  const handleAddToAccumulator = () => {
    setInAccumulator(!inAccumulator);
    if (onAddToAccumulator) {
      onAddToAccumulator(prediction.id);
    }
    
    toast({
      title: !inAccumulator ? "Added to Accumulator" : "Removed from Accumulator",
      description: !inAccumulator 
        ? "This prediction has been added to your accumulator" 
        : "This prediction has been removed from your accumulator",
    });
  };
  
  const isPredictionLocked = prediction.isPremium && subscriptionStatus !== "premium";
  
  return (
    <Card className="w-full mb-4 overflow-hidden hover:shadow-md transition-shadow">
      <CardHeader className="p-4 pb-2">
        <div className="flex justify-between items-start">
          <div>
            <div className="flex items-center gap-2 mb-1">
              <Badge variant="outline" className="text-xs font-normal">
                {prediction.league}
              </Badge>
              <Badge 
                variant={prediction.isPremium ? "premium" : "secondary"} 
                className={cn(
                  "text-xs font-medium",
                  prediction.isPremium && "bg-gradient-to-r from-amber-400 to-yellow-600 text-white"
                )}
              >
                {prediction.isPremium ? "PREMIUM" : "FREE"}
              </Badge>
              {prediction.valueBet?.isRecommended && (
                <Badge variant="value" className="bg-gradient-to-r from-green-500 to-emerald-600 text-white text-xs">
                  VALUE BET
                </Badge>
              )}
            </div>
            <CardTitle className="text-lg font-bold flex items-center gap-1">
              {prediction.homeTeam} 
              <span className="text-muted-foreground mx-1">vs</span> 
              {prediction.awayTeam}
            </CardTitle>
            <CardDescription className="flex items-center gap-1 mt-1">
              <Clock className="h-3 w-3" />
              {format(matchDate, "dd MMM yyyy, HH:mm")}
            </CardDescription>
          </div>
        </div>
      </CardHeader>
      
      <CardContent className="p-4 pt-2 pb-1">
        <div className="space-y-3">
          <div className="flex justify-between items-center">
            <div className="space-y-1">
              <div className="text-sm text-muted-foreground">Prediction:</div>
              <div className="font-medium flex items-center">
                <span className="mr-2">{primaryMarket}:</span>
                <Badge className="font-bold">
                  {outcomeDisplay} {isFootball && prediction.predictedOutcome !== "D" ? `(${getOutcomeTeam()})` : ""}
                </Badge>
              </div>
            </div>
            
            <div className="space-y-1 text-right">
              <div className="text-sm text-muted-foreground">Confidence:</div>
              <div className="font-bold bg-gradient-to-r bg-clip-text text-transparent text-lg 
                           from-blue-500 to-cyan-700">
                {prediction.confidence}%
              </div>
            </div>
          </div>
          
          <Progress 
            value={prediction.confidence} 
            className="h-2" 
            indicatorClassName={cn("bg-gradient-to-r", getGradientByConfidence(prediction.confidence))} 
          />
          
          {mainPrediction && !isPredictionLocked && (
            <div className="grid grid-cols-3 gap-2 my-3">
              {isFootball && (
                <>
                  <div className={cn(
                    "text-center p-2 rounded-lg",
                    prediction.predictedOutcome === "H" && "bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 ring-1 ring-green-500/50"
                  )}>
                    <div className="text-sm">Home</div>
                    <div className="font-bold">{formatOdds(mainPrediction.homeWin.odds)}</div>
                    <div className="text-xs text-muted-foreground">({mainPrediction.homeWin.probability}%)</div>
                  </div>
                  <div className={cn(
                    "text-center p-2 rounded-lg",
                    prediction.predictedOutcome === "D" && "bg-gradient-to-br from-amber-50 to-amber-100 dark:from-amber-900/20 dark:to-amber-800/20 ring-1 ring-amber-500/50"
                  )}>
                    <div className="text-sm">Draw</div>
                    <div className="font-bold">{formatOdds(mainPrediction.draw.odds)}</div>
                    <div className="text-xs text-muted-foreground">({mainPrediction.draw.probability}%)</div>
                  </div>
                  <div className={cn(
                    "text-center p-2 rounded-lg",
                    prediction.predictedOutcome === "A" && "bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 ring-1 ring-blue-500/50"
                  )}>
                    <div className="text-sm">Away</div>
                    <div className="font-bold">{formatOdds(mainPrediction.awayWin.odds)}</div>
                    <div className="text-xs text-muted-foreground">({mainPrediction.awayWin.probability}%)</div>
                  </div>
                </>
              )}
              
              {isBasketball && (
                <>
                  <div className={cn(
                    "text-center p-2 rounded-lg col-span-3/2",
                    prediction.predictedOutcome === "H" && "bg-gradient-to-br from-green-50 to-green-100 dark:from-green-900/20 dark:to-green-800/20 ring-1 ring-green-500/50"
                  )}>
                    <div className="text-sm">Home</div>
                    <div className="font-bold">{formatOdds(mainPrediction.homeWin.odds)}</div>
                    <div className="text-xs text-muted-foreground">({mainPrediction.homeWin.probability}%)</div>
                  </div>
                  <div className={cn(
                    "text-center p-2 rounded-lg col-span-3/2",
                    prediction.predictedOutcome === "A" && "bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 ring-1 ring-blue-500/50"
                  )}>
                    <div className="text-sm">Away</div>
                    <div className="font-bold">{formatOdds(mainPrediction.awayWin.odds)}</div>
                    <div className="text-xs text-muted-foreground">({mainPrediction.awayWin.probability}%)</div>
                  </div>
                </>
              )}
            </div>
          )}
          
          {isPredictionLocked && (
            <div className="bg-muted/50 p-3 rounded-md flex flex-col items-center justify-center my-3 space-y-2">
              <AlertTriangle className="h-5 w-5 text-amber-500" />
              <p className="text-sm text-center font-medium">
                Premium prediction locked. Upgrade your subscription to view details.
              </p>
              <Button variant="premium" size="sm" className="mt-1">
                Upgrade to Premium
              </Button>
            </div>
          )}
        </div>
      </CardContent>
      
      {!isPredictionLocked && (
        <>
          <div 
            className="px-4 py-2 text-sm font-medium text-center cursor-pointer hover:bg-muted/50 transition-colors flex items-center justify-center gap-1"
            onClick={() => setExpanded(!expanded)}
          >
            {expanded ? "Hide details" : "View details"}
            {expanded ? <ChevronUp className="h-4 w-4" /> : <ChevronDown className="h-4 w-4" />}
          </div>
          
          {expanded && (
            <div className="px-4 py-4 bg-muted/10 border-t">
              <div className="space-y-4">
                {prediction.predictions["PredictedScore"] && (
                  <div className="bg-muted/30 p-3 rounded-md text-center mb-4">
                    <h4 className="text-sm font-medium mb-2 flex items-center justify-center">
                      <Award className="mr-1 h-4 w-4 text-primary" />
                      Predicted Score
                    </h4>
                    <div className="text-xl font-bold bg-gradient-to-r from-primary/80 to-primary bg-clip-text text-transparent">
                      {prediction.predictions["PredictedScore"].home} - {prediction.predictions["PredictedScore"].away}
                    </div>
                    <div className="text-xs text-muted-foreground mt-1">
                      {prediction.homeTeam} vs {prediction.awayTeam}
                    </div>
                    {prediction.predictions["PredictedScore"].probability && (
                      <div className="text-xs font-medium mt-1 text-primary">
                        Confidence: {prediction.predictions["PredictedScore"].probability}%
                      </div>
                    )}
                  </div>
                )}
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                  {/* Football predictions */}
                  {isFootball && (
                    <>
                      {prediction.predictions["BTTS"] && (
                        <div className="bg-muted/20 p-3 rounded-md">
                          <div className="flex items-center mb-2">
                            <Shield className="h-4 w-4 text-blue-500 mr-1" />
                            <h4 className="text-sm font-medium">Both Teams To Score</h4>
                          </div>
                          <div className="grid grid-cols-2 gap-2">
                            <div className={cn(
                              "text-center p-2 rounded-md",
                              prediction.predictions["BTTS"].outcome === "Yes" && "bg-green-50 dark:bg-green-900/20 ring-1 ring-green-500/50"
                            )}>
                              <div className="text-sm font-medium">Yes</div>
                              <div className="text-xs text-muted-foreground">
                                ({prediction.predictions["BTTS"].outcome === "Yes" ? prediction.predictions["BTTS"].probability : 100 - prediction.predictions["BTTS"].probability}%)
                              </div>
                              {prediction.predictions["BTTS"].odds && prediction.predictions["BTTS"].outcome === "Yes" && (
                                <div className="text-xs font-medium mt-1 text-green-600">{prediction.predictions["BTTS"].odds.toFixed(2)}</div>
                              )}
                            </div>
                            <div className={cn(
                              "text-center p-2 rounded-md",
                              prediction.predictions["BTTS"].outcome === "No" && "bg-red-50 dark:bg-red-900/20 ring-1 ring-red-500/50"
                            )}>
                              <div className="text-sm font-medium">No</div>
                              <div className="text-xs text-muted-foreground">
                                ({prediction.predictions["BTTS"].outcome === "No" ? prediction.predictions["BTTS"].probability : 100 - prediction.predictions["BTTS"].probability}%)
                              </div>
                              {prediction.predictions["BTTS"].odds && prediction.predictions["BTTS"].outcome === "No" && (
                                <div className="text-xs font-medium mt-1 text-red-600">{prediction.predictions["BTTS"].odds.toFixed(2)}</div>
                              )}
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {prediction.predictions["BTTS_Over"] && (
                        <div className="bg-muted/20 p-3 rounded-md">
                          <div className="flex items-center mb-2">
                            <Zap className="h-4 w-4 text-amber-500 mr-1" />
                            <h4 className="text-sm font-medium">BTTS & Over {prediction.predictions["BTTS_Over"].line}</h4>
                          </div>
                          <div className="grid grid-cols-2 gap-2">
                            <div className={cn(
                              "text-center p-2 rounded-md",
                              prediction.predictions["BTTS_Over"].outcome === "Yes" && "bg-green-50 dark:bg-green-900/20 ring-1 ring-green-500/50"
                            )}>
                              <div className="text-sm font-medium">Yes</div>
                              <div className="text-xs text-muted-foreground">
                                {prediction.predictions["BTTS_Over"].probability}%
                              </div>
                              {prediction.predictions["BTTS_Over"].odds && (
                                <div className="text-xs font-medium mt-1 text-green-600">{prediction.predictions["BTTS_Over"].odds.toFixed(2)}</div>
                              )}
                            </div>
                            <div className={cn(
                              "text-center p-2 rounded-md",
                              prediction.predictions["BTTS_Over"].outcome === "No" && "bg-red-50 dark:bg-red-900/20 ring-1 ring-red-500/50"
                            )}>
                              <div className="text-sm font-medium">No</div>
                              <div className="text-xs text-muted-foreground">
                                {100 - prediction.predictions["BTTS_Over"].probability}%
                              </div>
                            </div>
                          </div>
                        </div>
                      )}
                        
                      {prediction.predictions["Over_Under"] && (
                        <div className="bg-muted/20 p-3 rounded-md">
                          <div className="flex items-center mb-2">
                            <BarChart3 className="h-4 w-4 text-indigo-500 mr-1" />
                            <h4 className="text-sm font-medium">Over/Under {prediction.predictions["Over_Under"].line}</h4>
                          </div>
                          <div className="grid grid-cols-2 gap-2">
                            <div className={cn(
                              "text-center p-2 rounded-md",
                              prediction.predictions["Over_Under"].outcome === "Over" && "bg-blue-50 dark:bg-blue-900/20 ring-1 ring-blue-500/50"
                            )}>
                              <div className="text-sm font-medium">Over</div>
                              <div className="text-xs text-muted-foreground">
                                ({prediction.predictions["Over_Under"].outcome === "Over" ? prediction.predictions["Over_Under"].probability : 100 - prediction.predictions["Over_Under"].probability}%)
                              </div>
                              {prediction.predictions["Over_Under"].odds && prediction.predictions["Over_Under"].outcome === "Over" && (
                                <div className="text-xs font-medium mt-1 text-blue-600">{prediction.predictions["Over_Under"].odds.toFixed(2)}</div>
                              )}
                            </div>
                            <div className={cn(
                              "text-center p-2 rounded-md",
                              prediction.predictions["Over_Under"].outcome === "Under" && "bg-purple-50 dark:bg-purple-900/20 ring-1 ring-purple-500/50"
                            )}>
                              <div className="text-sm font-medium">Under</div>
                              <div className="text-xs text-muted-foreground">
                                ({prediction.predictions["Over_Under"].outcome === "Under" ? prediction.predictions["Over_Under"].probability : 100 - prediction.predictions["Over_Under"].probability}%)
                              </div>
                              {prediction.predictions["Over_Under"].odds && prediction.predictions["Over_Under"].outcome === "Under" && (
                                <div className="text-xs font-medium mt-1 text-purple-600">{prediction.predictions["Over_Under"].odds.toFixed(2)}</div>
                              )}
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {prediction.predictions["CorrectScore"] && (
                        <div className="bg-muted/20 p-3 rounded-md">
                          <div className="flex items-center mb-2">
                            <Target className="h-4 w-4 text-red-500 mr-1" />
                            <h4 className="text-sm font-medium">Correct Score</h4>
                          </div>
                          <div className="text-center">
                            <div className="font-medium">{prediction.predictions["CorrectScore"].outcome}</div>
                            <div className="text-xs text-muted-foreground">
                              Confidence: {prediction.predictions["CorrectScore"].probability}%
                            </div>
                            {prediction.predictions["CorrectScore"].odds && (
                              <div className="text-xs font-medium mt-1 text-red-600">Odds: {prediction.predictions["CorrectScore"].odds.toFixed(2)}</div>
                            )}
                          </div>
                          
                          {prediction.predictions["CorrectScore"].scores && (
                            <div className="mt-2">
                              <div className="text-xs text-muted-foreground mb-1">Other possible scores:</div>
                              <div className="grid grid-cols-3 gap-1">
                                {prediction.predictions["CorrectScore"].scores.map((score, i) => (
                                  <div key={i} className="text-center p-1 text-xs bg-muted/20 rounded">
                                    {score.home}-{score.away}
                                  </div>
                                ))}
                              </div>
                            </div>
                          )}
                        </div>
                      )}
                      
                      {prediction.predictions["HalfTime_FullTime"] && (
                        <div className="bg-muted/20 p-3 rounded-md">
                          <div className="flex items-center mb-2">
                            <Clock className="h-4 w-4 text-orange-500 mr-1" />
                            <h4 className="text-sm font-medium">Half Time/Full Time</h4>
                          </div>
                          <div className="text-center">
                            <div className="font-medium">{prediction.predictions["HalfTime_FullTime"].outcome}</div>
                            <div className="text-xs text-muted-foreground mb-2">
                              Confidence: {prediction.predictions["HalfTime_FullTime"].probability}%
                            </div>
                            
                            {prediction.predictions["HalfTime_FullTime"].combinations && (
                              <div className="grid grid-cols-3 gap-1 mt-2">
                                {prediction.predictions["HalfTime_FullTime"].combinations.map((comb, i) => (
                                  <div 
                                    key={i} 
                                    className={cn(
                                      "text-center p-1 text-xs rounded border",
                                      prediction.predictions["HalfTime_FullTime"]?.outcome === `${comb.halfTime}/${comb.fullTime}` && 
                                      "bg-orange-50 dark:bg-orange-900/20 border-orange-200 dark:border-orange-800"
                                    )}
                                  >
                                    {comb.halfTime}/{comb.fullTime}
                                    <div className="text-[10px] text-muted-foreground">{comb.probability}%</div>
                                  </div>
                                ))}
                              </div>
                            )}
                          </div>
                        </div>
                      )}
                      
                      {prediction.predictions["Double_Chance"] && (
                        <div className="bg-muted/20 p-3 rounded-md">
                          <div className="flex items-center mb-2">
                            <Percent className="h-4 w-4 text-cyan-500 mr-1" />
                            <h4 className="text-sm font-medium">Double Chance</h4>
                          </div>
                          <div className="text-center">
                            <div className="font-medium">{prediction.predictions["Double_Chance"].outcome}</div>
                            <div className="text-xs text-muted-foreground mb-2">
                              Confidence: {prediction.predictions["Double_Chance"].probability}%
                            </div>
                            
                            <div className="grid grid-cols-3 gap-1 mt-2">
                              {prediction.predictions["Double_Chance"].combinations.map((comb, i) => (
                                <div 
                                  key={i} 
                                  className={cn(
                                    "text-center p-1 text-xs rounded border",
                                    prediction.predictions["Double_Chance"]?.outcome === comb.name && 
                                    "bg-cyan-50 dark:bg-cyan-900/20 border-cyan-200 dark:border-cyan-800"
                                  )}
                                >
                                  {comb.name}
                                  <div className="text-[10px] text-muted-foreground">{comb.probability}%</div>
                                </div>
                              ))}
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {prediction.predictions["Win_To_Nil"] && (
                        <div className="bg-muted/20 p-3 rounded-md">
                          <div className="flex items-center mb-2">
                            <Goal className="h-4 w-4 text-emerald-500 mr-1" />
                            <h4 className="text-sm font-medium">Win To Nil - {prediction.predictions["Win_To_Nil"].team}</h4>
                          </div>
                          <div className="text-center">
                            <div className="font-medium">
                              {prediction.predictions["Win_To_Nil"].outcome}
                            </div>
                            <div className="text-xs text-muted-foreground">
                              Confidence: {prediction.predictions["Win_To_Nil"].probability}%
                            </div>
                            {prediction.predictions["Win_To_Nil"].odds && (
                              <div className="text-xs font-medium mt-1 text-emerald-600">{prediction.predictions["Win_To_Nil"].odds.toFixed(2)}</div>
                            )}
                          </div>
                        </div>
                      )}
                    </>
                  )}
                
                {isBasketball && (
                  <>
                    {prediction.predictions["TotalPoints"] && (
                      <div className="bg-muted/20 p-3 rounded-md">
                        <div className="flex items-center mb-2">
                          <LineChart className="h-4 w-4 text-purple-500 mr-1" />
                          <h4 className="text-sm font-medium">Total Points</h4>
                        </div>
                        <div className="grid grid-cols-2 gap-2">
                          <div className={cn(
                            "text-center p-2 rounded-md",
                            prediction.predictions["TotalPoints"].outcome === "Over" && "bg-blue-50 dark:bg-blue-900/20 ring-1 ring-blue-500/50"
                          )}>
                            <div className="text-sm font-medium">Over {prediction.predictions["TotalPoints"].line}</div>
                            <div className="text-xs text-muted-foreground">
                              ({prediction.predictions["TotalPoints"].outcome === "Over" ? prediction.predictions["TotalPoints"].probability : 100 - prediction.predictions["TotalPoints"].probability}%)
                            </div>
                            {prediction.predictions["TotalPoints"].odds && prediction.predictions["TotalPoints"].outcome === "Over" && (
                              <div className="text-xs font-medium mt-1 text-blue-600">{prediction.predictions["TotalPoints"].odds.toFixed(2)}</div>
                            )}
                          </div>
                          <div className={cn(
                            "text-center p-2 rounded-md",
                            prediction.predictions["TotalPoints"].outcome === "Under" && "bg-purple-50 dark:bg-purple-900/20 ring-1 ring-purple-500/50"
                          )}>
                            <div className="text-sm font-medium">Under {prediction.predictions["TotalPoints"].line}</div>
                            <div className="text-xs text-muted-foreground">
                              ({prediction.predictions["TotalPoints"].outcome === "Under" ? prediction.predictions["TotalPoints"].probability : 100 - prediction.predictions["TotalPoints"].probability}%)
                            </div>
                            {prediction.predictions["TotalPoints"].odds && prediction.predictions["TotalPoints"].outcome === "Under" && (
                              <div className="text-xs font-medium mt-1 text-purple-600">{prediction.predictions["TotalPoints"].odds.toFixed(2)}</div>
                            )}
                          </div>
                        </div>
                        <div className="mt-2 text-xs text-center text-muted-foreground">
                          Predicted total: {prediction.predictions["TotalPoints"].predictedTotal}
                        </div>
                      </div>
                    )}
                    
                    {prediction.predictions["Spread"] && (
                      <div className="bg-muted/20 p-3 rounded-md">
                        <div className="flex items-center mb-2">
                          <Target className="h-4 w-4 text-slate-500 mr-1" />
                          <h4 className="text-sm font-medium">Spread</h4>
                        </div>
                        <div className="text-center">
                          <div className="font-medium">
                            {prediction.predictions["Spread"].favored === "H" ? prediction.homeTeam : prediction.awayTeam} 
                            {" "}{prediction.predictions["Spread"].line > 0 ? "+" : ""}{prediction.predictions["Spread"].line}
                          </div>
                          <div className="text-xs text-muted-foreground">
                            Confidence: {prediction.predictions["Spread"].probability}%
                          </div>
                          {prediction.predictions["Spread"].odds && (
                            <div className="text-xs font-medium mt-1 text-slate-600">{prediction.predictions["Spread"].odds.toFixed(2)}</div>
                          )}
                        </div>
                      </div>
                    )}
                  </>
                )}
                
                {prediction.valueBet && (
                  <div className="mt-4 pt-2 border-t border-border">
                    <div className="bg-gradient-to-br from-green-50 to-emerald-50 dark:from-green-900/20 dark:to-emerald-900/20 p-3 rounded-md ring-1 ring-green-500/50">
                      <div className="flex items-center mb-2">
                        <Flame className="h-4 w-4 text-green-500 mr-1" />
                        <h4 className="text-sm font-medium">Value Bet</h4>
                      </div>
                      <div className="flex justify-between items-center">
                        <div>
                          <div className="font-medium">
                            {prediction.valueBet.outcome === "H" ? `${prediction.homeTeam} (Home)` :
                             prediction.valueBet.outcome === "D" ? "Draw" : 
                             `${prediction.awayTeam} (Away)`}
                          </div>
                          <div className="text-xs text-muted-foreground mt-0.5">
                            Expected value: {prediction.valueBet.value > 0 ? "+" : ""}{prediction.valueBet.value.toFixed(2)}%
                          </div>
                        </div>
                        <div className="text-lg font-bold text-green-600">
                          {formatOdds(prediction.valueBet.odds)}
                        </div>
                      </div>
                    </div>
                  </div>
                )}
              </div>
            </div>
          )}
        </>
      )}
      
      <CardFooter className="flex items-center justify-between p-3 border-t">
        <TooltipProvider>
          <div className="flex items-center gap-2">
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" size="icon" onClick={handleSave}>
                  {saved ? (
                    <BookmarkIcon className="h-5 w-5 text-primary" />
                  ) : (
                    <BookmarkPlus className="h-5 w-5" />
                  )}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{saved ? "Remove from bookmarks" : "Save prediction"}</p>
              </TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" size="icon" onClick={handleAddToAccumulator} disabled={isPredictionLocked}>
                  {inAccumulator ? (
                    <Award className="h-5 w-5 text-primary" />
                  ) : (
                    <Award className="h-5 w-5" />
                  )}
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>{inAccumulator ? "Remove from accumulator" : "Add to accumulator"}</p>
              </TooltipContent>
            </Tooltip>
            
            <Tooltip>
              <TooltipTrigger asChild>
                <Button variant="ghost" size="icon">
                  <Share2 className="h-5 w-5" />
                </Button>
              </TooltipTrigger>
              <TooltipContent>
                <p>Share prediction</p>
              </TooltipContent>
            </Tooltip>
          </div>
        </TooltipProvider>
        
        <TooltipProvider>
          <Tooltip>
            <TooltipTrigger asChild>
              <div className="flex items-center gap-1 text-muted-foreground text-sm">
                <Heart className="h-4 w-4" />
                <span>94%</span>
              </div>
            </TooltipTrigger>
            <TooltipContent>
              <p>94% of users found this prediction helpful</p>
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      </CardFooter>
    </Card>
  );
}