import { useState, useEffect } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from '@/components/ui/button';
import { useOnboarding } from './onboarding-provider';
import { ArrowRight, X, CheckCircle2 } from 'lucide-react';

// Tour step definitions
const TOUR_STEPS = [
  {
    id: 'welcome',
    title: 'Welcome to PuntaIQ',
    description: 'Let us show you around our AI-powered sports prediction platform. This quick tour will help you get the most out of your experience.',
    position: 'center',
  },
  {
    id: 'predictions',
    title: 'AI-Powered Predictions',
    description: 'Here you\'ll find our daily predictions generated by advanced machine learning models. They\'re updated automatically every day with no human intervention.',
    position: 'right',
    targetSelector: '.predictions-section',
  },
  {
    id: 'accumulators',
    title: 'Multi-Tiered Accumulators',
    description: 'Our system creates special accumulators with odds of 15, 20, 30, and 50 to maximize your potential returns. These are carefully selected high-confidence predictions.',
    position: 'bottom',
    targetSelector: '.accumulator-section',
  },
  {
    id: 'stats',
    title: 'Track Our Performance',
    description: 'We maintain complete transparency with detailed statistics about our prediction accuracy. Check how we\'re performing over time.',
    position: 'left',
    targetSelector: '.stats-nav-link',
  },
  {
    id: 'notification',
    title: 'Stay Updated',
    description: 'Enable notifications to get alerts when new predictions are ready or when matches are starting soon.',
    position: 'bottom',
    targetSelector: '.notification-area',
  },
  {
    id: 'complete',
    title: 'You\'re All Set!',
    description: 'Enjoy making smarter bets with PuntaIQ. If you need help at any time, visit our FAQ section or contact support.',
    position: 'center',
  },
];

export function GuidedTour() {
  const { state, endGuidedTour, markStepComplete, setCurrentStep } = useOnboarding();
  const [currentStepIndex, setCurrentStepIndex] = useState(0);
  const [isOpen, setIsOpen] = useState(false);
  const currentStep = TOUR_STEPS[currentStepIndex];
  
  // Sync dialog open state with tour state
  useEffect(() => {
    setIsOpen(state.showGuidedTour);
    if (state.showGuidedTour && currentStepIndex === 0) {
      setCurrentStep('welcome');
    }
  }, [state.showGuidedTour]);
  
  // Handle dialog close
  const handleClose = () => {
    setIsOpen(false);
    endGuidedTour();
  };
  
  // Go to next step
  const handleNext = () => {
    // Mark current step as complete
    markStepComplete(currentStep.id);
    
    if (currentStepIndex < TOUR_STEPS.length - 1) {
      const nextIndex = currentStepIndex + 1;
      setCurrentStepIndex(nextIndex);
      setCurrentStep(TOUR_STEPS[nextIndex].id);
      
      // Try to highlight target element if specified
      highlightTarget(TOUR_STEPS[nextIndex].targetSelector);
    } else {
      // End tour when reaching the last step
      markStepComplete('guided_tour_completed');
      handleClose();
    }
  };
  
  // Try to highlight the target element
  const highlightTarget = (selector?: string) => {
    if (!selector) return;
    
    const element = document.querySelector(selector);
    if (element) {
      // Add pulse animation class to the element
      element.classList.add('pulse-highlight');
      
      // Remove after animation completes
      setTimeout(() => {
        element.classList.remove('pulse-highlight');
      }, 2000);
      
      // Smooth scroll to element if not in viewport
      if (!isElementInViewport(element)) {
        element.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
    }
  };
  
  // Check if element is in viewport
  const isElementInViewport = (el: Element) => {
    const rect = el.getBoundingClientRect();
    return (
      rect.top >= 0 &&
      rect.left >= 0 &&
      rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
      rect.right <= (window.innerWidth || document.documentElement.clientWidth)
    );
  };
  
  // Render step progress indicators
  const renderStepIndicators = () => {
    return (
      <div className="flex justify-center gap-1 mt-2">
        {TOUR_STEPS.map((step, index) => (
          <div
            key={step.id}
            className={`h-1.5 rounded-full transition-all ${
              index === currentStepIndex
                ? 'w-6 bg-primary'
                : index < currentStepIndex
                ? 'w-1.5 bg-primary/60'
                : 'w-1.5 bg-muted'
            }`}
          />
        ))}
      </div>
    );
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent 
        className="max-w-md rounded-xl shadow-xl bg-gradient-to-br from-background to-background/80 backdrop-blur-md border-primary/20 p-0 overflow-hidden"
        onInteractOutside={(e) => e.preventDefault()} // Prevent closing by clicking outside
      >
        <div className="absolute top-2 right-2">
          <Button variant="ghost" size="icon" onClick={handleClose}>
            <X className="h-4 w-4" />
          </Button>
        </div>
        
        <div className="p-6">
          <DialogHeader>
            <DialogTitle className="text-xl font-bold bg-gradient-to-r from-primary to-primary-foreground bg-clip-text text-transparent">
              {currentStep.title}
            </DialogTitle>
            {renderStepIndicators()}
            <DialogDescription className="mt-4 text-base">
              {currentStep.description}
            </DialogDescription>
          </DialogHeader>
          
          <div className="relative w-full h-20 mt-6 overflow-hidden rounded-md bg-gradient-to-r from-primary/5 to-primary/10 flex items-center justify-center">
            {/* Visual representation based on step */}
            <div className="absolute inset-0 flex items-center justify-center">
              {currentStep.id === 'welcome' && (
                <div className="animate-float">
                  <div className="text-4xl font-bold bg-gradient-to-r from-primary to-violet-500 bg-clip-text text-transparent">
                    PuntaIQ
                  </div>
                </div>
              )}
              
              {currentStep.id === 'complete' && (
                <div className="animate-bounce-slow">
                  <CheckCircle2 className="h-12 w-12 text-green-500" />
                </div>
              )}
            </div>
          </div>
          
          <DialogFooter className="flex justify-between items-center mt-6">
            <Button 
              variant="outline" 
              size="sm" 
              onClick={handleClose}
              className="text-muted-foreground hover:text-foreground"
            >
              Skip tour
            </Button>
            <Button onClick={handleNext} className="group">
              {currentStepIndex === TOUR_STEPS.length - 1 ? 'Get started' : 'Next'}
              <ArrowRight className="ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform" />
            </Button>
          </DialogFooter>
        </div>
      </DialogContent>
    </Dialog>
  );
}